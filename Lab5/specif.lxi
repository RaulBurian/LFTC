%{ 	 
#include <math.h> 
#include <stdio.h>
#include "specif.tab.h"
int lines = 0;
%} 
%option noyywrap

DIGIT 		[0-9]
NUMBER		-{0,1}[1-9][0-9]*|0
CONST		{NUMBER}
ID 		[a-zA-Z][a-zA-Z0-9]{0,7}

%% 

"float"	{printf( "Reserved word: %s\n", yytext );  return FLOAT;}
"int"	{printf( "Reserved word: %s\n", yytext );  return INT;}
"if"	{printf( "Reserved word: %s\n", yytext );  return IF;}
"else"	{printf( "Reserved word: %s\n", yytext );  return ELSE;}
"cout"	{printf( "Reserved word: %s\n", yytext );  return COUT;}
"cin"	{printf( "Reserved word: %s\n", yytext );  return CIN;}
"while"	{printf( "Reserved word: %s\n", yytext );  return WHILE;}
"main"	{printf( "Reserved word: %s\n", yytext );  return MAIN;}
"return"	{printf( "Reserved word: %s\n", yytext );  return RETURN;}

{ID}	{printf( "Identifier: %s\n", yytext ); return IDENTIFIER;}

{CONST}	{printf( "Constant: %s\n", yytext ); return CONSTANT;}

";"	{printf( "Separator: %s\n", yytext ); return SEMI_COLON;}
"+"	{printf( "Operator: %s\n", yytext ); return PLUS;}
"-"	{printf( "Operator: %s\n", yytext ); return MINUS;}
"*"	{printf( "Operator: %s\n", yytext ); return MULTIPLY;}
"/"	{printf( "Operator: %s\n", yytext ); return DIVISION;}
"<"	{printf( "Operator: %s\n", yytext ); return LESS_THAN;}
"<="	{printf( "Operator: %s\n", yytext ); return LESS_OR_EQUAL_THAN;}
"="	{printf( "Separator: %s\n", yytext ); return ASSIGNMENT;}
">="	{printf( "Operator: %s\n", yytext ); return GREATER_OR_EQUAL_THAN;}
">"	{printf( "Operator: %s\n", yytext ); return GREATER_THAN;}
"=="	{printf( "Operator: %s\n", yytext ); return EQUAL;}
"<<"	{printf( "Operator: %s\n", yytext ); return EXTRACT;}
">>"	{printf( "Operator: %s\n", yytext ); return INSERT;}
"["	{printf( "Separator: %s\n", yytext ); return LEFT_SQUARE_PARENTHESIS;}
"]"	{printf( "Separator: %s\n", yytext ); return RIGHT_SQUARE_PARENTHESIS;}
"("	{printf( "Separator: %s\n", yytext ); return LEFT_ROUND_PARENTHESIS;}
")"	{printf( "Separator: %s\n", yytext ); return RIGHT_ROUND_PARENTHESIS;}
"{"	{printf( "Separator: %s\n", yytext ); return LEFT_ACCOLADE;}
"}"	{printf( "Separator: %s\n", yytext ); return RIGHT_ACCOLADE;}

"{"[^}\n]*"}"	/* elimina comentarii */ {}

[ \t]+	/* elimina spatii */  	{}

[\n]+	{++lines;}

[a-zA-Z][a-zA-Z0-9]{8,}	{printf("Illegal size of the identifier at line %d\n", lines); return -1;}

[0-9][a-zA-Z0-9]{0,7}	{printf("Illegal identifier at line %d\n", lines); return -1;}
		 
.	{printf("Illegal symbol at line\n"); return -1;}
%%